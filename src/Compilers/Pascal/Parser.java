
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 14 18:39:44 UTC 2014
//----------------------------------------------------

package Compilers.Pascal;

import java.util.Map.Entry;
import java_cup.runtime.*;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 14 18:39:44 UTC 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\006\000\002\003" +
    "\002\000\002\003\004\000\002\004\007\000\002\005\004" +
    "\000\002\005\003\000\002\006\005\000\002\010\005\000" +
    "\002\010\003\000\002\007\005\000\002\007\003\000\002" +
    "\011\005\000\002\012\003\000\002\013\006\000\002\013" +
    "\004\000\002\014\005\000\002\015\003\000\002\016\003" +
    "\000\002\017\003\000\002\020\006\000\002\021\003\000" +
    "\002\022\004\000\002\023\005\000\002\024\003\000\002" +
    "\025\002\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\006\000\002\025\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\027\003\000" +
    "\002\030\003\000\002\031\003\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\003\000\002\034" +
    "\003\000\002\034\003\000\002\035\006\000\002\036\003" +
    "\000\002\037\006\000\002\040\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\042\006\000\002\042\004\000\002\042" +
    "\005\000\002\042\005\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\042\003\000\002\042\003\000\002\042\003\000\002" +
    "\042\003\000\002\042\003\000\002\042\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\042\003\000" +
    "\002\043\003\000\002\044\003\000\002\045\003\000\002" +
    "\045\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\012\005\001\002\000\004\002\170\001" +
    "\002\000\006\010\uffff\013\010\001\002\000\004\010\162" +
    "\001\002\000\006\010\uffff\013\010\001\002\000\004\064" +
    "\012\001\002\000\004\007\017\001\002\000\006\005\014" +
    "\007\ufffb\001\002\000\004\007\ufffc\001\002\000\004\064" +
    "\015\001\002\000\004\006\016\001\002\000\004\007\ufffa" +
    "\001\002\000\032\004\uffe8\011\033\021\030\022\026\025" +
    "\022\033\031\034\045\035\041\036\040\037\035\040\021" +
    "\064\025\001\002\000\004\004\160\001\002\000\012\004" +
    "\uffce\015\uffce\016\uffce\017\uffce\001\002\000\054\005\124" +
    "\032\116\041\133\042\125\043\126\044\121\045\122\046" +
    "\110\047\120\050\132\051\113\052\112\053\114\054\107" +
    "\055\123\056\135\057\111\060\136\061\117\062\134\063" +
    "\130\001\002\000\040\004\uffe8\011\033\015\uffe8\016\uffe8" +
    "\017\uffe8\021\030\022\026\025\022\033\031\034\045\035" +
    "\041\036\040\037\035\040\021\064\025\001\002\000\012" +
    "\004\uffe0\015\uffe0\016\uffe0\017\uffe0\001\002\000\014\004" +
    "\uffdf\005\uffde\015\uffdf\016\uffdf\017\uffdf\001\002\000\012" +
    "\026\uffe9\027\uffe9\064\uffe9\066\uffe9\001\002\000\012\004" +
    "\uffe5\015\uffe5\016\uffe5\017\uffe5\001\002\000\054\005\124" +
    "\032\116\041\133\042\125\043\126\044\121\045\122\046" +
    "\110\047\120\050\132\051\113\052\112\053\114\054\107" +
    "\055\123\056\135\057\111\060\136\061\117\062\134\063" +
    "\130\001\002\000\012\004\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\001\002\000\004\005\103\001\002\000\034\004\uffe8\011" +
    "\033\016\uffe8\021\030\022\026\025\022\033\031\034\045" +
    "\035\041\036\040\037\035\040\021\064\025\001\002\000" +
    "\040\004\uffe8\011\033\015\uffe8\016\uffe8\017\uffe8\021\030" +
    "\022\026\025\022\033\031\034\045\035\041\036\040\037" +
    "\035\040\021\064\025\001\002\000\012\004\uffcf\015\uffcf" +
    "\016\uffcf\017\uffcf\001\002\000\012\004\uffe2\015\uffe2\016" +
    "\uffe2\017\uffe2\001\002\000\012\004\uffe1\015\uffe1\016\uffe1" +
    "\017\uffe1\001\002\000\012\004\uffd0\015\uffd0\016\uffd0\017" +
    "\uffd0\001\002\000\012\004\uffd1\015\uffd1\016\uffd1\017\uffd1" +
    "\001\002\000\012\026\061\027\053\064\060\066\051\001" +
    "\002\000\012\004\uffe6\015\uffe6\016\uffe6\017\uffe6\001\002" +
    "\000\012\004\ufff8\015\ufff8\016\ufff8\017\ufff8\001\002\000" +
    "\012\004\uffd2\015\uffd2\016\uffd2\017\uffd2\001\002\000\012" +
    "\004\uffe7\015\uffe7\016\uffe7\017\uffe7\001\002\000\006\006" +
    "\uffd8\024\uffd8\001\002\000\006\006\uffdb\024\uffdb\001\002" +
    "\000\006\006\uffd9\024\uffd9\001\002\000\006\006\uffdc\024" +
    "\uffdc\001\002\000\004\005\uffd3\001\002\000\004\005\066" +
    "\001\002\000\006\006\uffd7\024\uffd7\001\002\000\004\005" +
    "\063\001\002\000\004\024\062\001\002\000\006\006\uffda" +
    "\024\uffda\001\002\000\004\005\uffd5\001\002\000\040\004" +
    "\uffea\011\uffea\015\uffea\016\uffea\017\uffea\021\uffea\022\uffea" +
    "\025\uffea\033\uffea\034\uffea\035\uffea\036\uffea\037\uffea\040" +
    "\uffea\064\uffea\001\002\000\012\026\061\027\053\064\060" +
    "\066\051\001\002\000\004\006\065\001\002\000\006\006" +
    "\uffd4\024\uffd4\001\002\000\012\026\061\027\053\064\060" +
    "\066\051\001\002\000\004\006\070\001\002\000\006\006" +
    "\uffd6\024\uffd6\001\002\000\012\004\ufff2\015\072\016\ufff2" +
    "\017\ufff2\001\002\000\040\004\uffee\011\uffee\015\uffee\016" +
    "\uffee\017\uffee\021\uffee\022\uffee\025\uffee\033\uffee\034\uffee" +
    "\035\uffee\036\uffee\037\uffee\040\uffee\064\uffee\001\002\000" +
    "\040\004\uffe8\011\033\015\uffe8\016\uffe8\017\uffe8\021\030" +
    "\022\026\025\022\033\031\034\045\035\041\036\040\037" +
    "\035\040\021\064\025\001\002\000\040\004\uffef\011\uffef" +
    "\015\uffef\016\uffef\017\uffef\021\uffef\022\uffef\025\uffef\033" +
    "\uffef\034\uffef\035\uffef\036\uffef\037\uffef\040\uffef\064\uffef" +
    "\001\002\000\012\004\ufff3\015\ufff3\016\ufff3\017\ufff3\001" +
    "\002\000\010\004\101\016\ufff6\017\ufff6\001\002\000\004" +
    "\016\100\001\002\000\012\004\ufff9\015\ufff9\016\ufff9\017" +
    "\ufff9\001\002\000\036\004\uffe8\011\033\016\uffe8\017\uffe8" +
    "\021\030\022\026\025\022\033\031\034\045\035\041\036" +
    "\040\037\035\040\021\064\025\001\002\000\006\016\ufff7" +
    "\017\ufff7\001\002\000\012\026\061\027\053\064\060\066" +
    "\051\001\002\000\004\006\106\001\002\000\004\006\uffdd" +
    "\001\002\000\012\004\uffe4\015\uffe4\016\uffe4\017\uffe4\001" +
    "\002\000\014\006\uffbe\014\uffbe\023\uffbe\030\uffbe\031\uffbe" +
    "\001\002\000\014\006\uffc4\014\uffc4\023\uffc4\030\uffc4\031" +
    "\uffc4\001\002\000\014\006\uffbb\014\uffbb\023\uffbb\030\uffbb" +
    "\031\uffbb\001\002\000\014\006\uffc0\014\uffc0\023\uffc0\030" +
    "\uffc0\031\uffc0\001\002\000\014\006\uffc1\014\uffc1\023\uffc1" +
    "\030\uffc1\031\uffc1\001\002\000\014\006\uffbf\014\uffbf\023" +
    "\uffbf\030\uffbf\031\uffbf\001\002\000\054\005\124\032\116" +
    "\041\133\042\125\043\126\044\121\045\122\046\110\047" +
    "\120\050\132\051\113\052\112\053\114\054\107\055\123" +
    "\056\135\057\111\060\136\061\117\062\134\063\130\001" +
    "\002\000\054\005\uffb6\032\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6\057\uffb6\060\uffb6" +
    "\061\uffb6\062\uffb6\063\uffb6\001\002\000\014\006\uffb9\014" +
    "\uffb9\023\uffb9\030\uffb9\031\uffb9\001\002\000\014\006\uffc3" +
    "\014\uffc3\023\uffc3\030\uffc3\031\uffc3\001\002\000\014\006" +
    "\uffc6\014\uffc6\023\uffc6\030\uffc6\031\uffc6\001\002\000\014" +
    "\006\uffc5\014\uffc5\023\uffc5\030\uffc5\031\uffc5\001\002\000" +
    "\014\006\uffbd\014\uffbd\023\uffbd\030\uffbd\031\uffbd\001\002" +
    "\000\054\005\124\032\116\041\133\042\125\043\126\044" +
    "\121\045\122\046\110\047\120\050\132\051\113\052\112" +
    "\053\114\054\107\055\123\056\135\057\111\060\136\061" +
    "\117\062\134\063\130\001\002\000\014\006\uffc8\014\uffc8" +
    "\023\uffc8\030\uffc8\031\uffc8\001\002\000\014\006\uffc7\014" +
    "\uffc7\023\uffc7\030\uffc7\031\uffc7\001\002\000\010\023\143" +
    "\030\144\031\146\001\002\000\004\005\uffb7\001\002\000" +
    "\004\005\137\001\002\000\014\006\uffc2\014\uffc2\023\uffc2" +
    "\030\uffc2\031\uffc2\001\002\000\014\006\uffc9\014\uffc9\023" +
    "\uffc9\030\uffc9\031\uffc9\001\002\000\014\006\uffb8\014\uffb8" +
    "\023\uffb8\030\uffb8\031\uffb8\001\002\000\014\006\uffbc\014" +
    "\uffbc\023\uffbc\030\uffbc\031\uffbc\001\002\000\014\006\uffba" +
    "\014\uffba\023\uffba\030\uffba\031\uffba\001\002\000\012\026" +
    "\061\027\053\064\060\066\051\001\002\000\004\006\141" +
    "\001\002\000\014\006\uffcd\014\uffcd\023\uffcd\030\uffcd\031" +
    "\uffcd\001\002\000\040\004\ufff1\011\ufff1\015\ufff1\016\ufff1" +
    "\017\ufff1\021\ufff1\022\ufff1\025\ufff1\033\ufff1\034\ufff1\035" +
    "\ufff1\036\ufff1\037\ufff1\040\ufff1\064\ufff1\001\002\000\040" +
    "\004\ufff0\011\ufff0\015\ufff0\016\ufff0\017\ufff0\021\ufff0\022" +
    "\ufff0\025\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\037\ufff0" +
    "\040\ufff0\064\ufff0\001\002\000\054\005\uffb5\032\uffb5\041" +
    "\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047\uffb5" +
    "\050\uffb5\051\uffb5\052\uffb5\053\uffb5\054\uffb5\055\uffb5\056" +
    "\uffb5\057\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\001\002" +
    "\000\054\005\124\032\116\041\133\042\125\043\126\044" +
    "\121\045\122\046\110\047\120\050\132\051\113\052\112" +
    "\053\114\054\107\055\123\056\135\057\111\060\136\061" +
    "\117\062\134\063\130\001\002\000\054\005\uffb4\032\uffb4" +
    "\041\uffb4\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047" +
    "\uffb4\050\uffb4\051\uffb4\052\uffb4\053\uffb4\054\uffb4\055\uffb4" +
    "\056\uffb4\057\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\001" +
    "\002\000\014\006\uffcb\014\uffcb\023\uffcb\030\144\031\146" +
    "\001\002\000\010\006\151\030\144\031\146\001\002\000" +
    "\014\006\uffca\014\uffca\023\uffca\030\uffca\031\uffca\001\002" +
    "\000\014\006\uffcc\014\uffcc\023\uffcc\030\144\031\146\001" +
    "\002\000\012\004\uffeb\015\uffeb\016\uffeb\017\uffeb\001\002" +
    "\000\010\014\155\030\144\031\146\001\002\000\040\004" +
    "\uffec\011\uffec\015\uffec\016\uffec\017\uffec\021\uffec\022\uffec" +
    "\025\uffec\033\uffec\034\uffec\035\uffec\036\uffec\037\uffec\040" +
    "\uffec\064\uffec\001\002\000\040\004\uffe8\011\033\015\uffe8" +
    "\016\uffe8\017\uffe8\021\030\022\026\025\022\033\031\034" +
    "\045\035\041\036\040\037\035\040\021\064\025\001\002" +
    "\000\012\004\uffed\015\uffed\016\uffed\017\uffed\001\002\000" +
    "\006\010\ufffd\013\ufffd\001\002\000\004\010\ufffe\001\002" +
    "\000\034\004\ufff4\011\ufff4\017\ufff4\021\ufff4\022\ufff4\025" +
    "\ufff4\033\ufff4\034\ufff4\035\ufff4\036\ufff4\037\ufff4\040\ufff4" +
    "\064\ufff4\001\002\000\034\004\uffe8\011\033\017\uffe8\021" +
    "\030\022\026\025\022\033\031\034\045\035\041\036\040" +
    "\037\035\040\021\064\025\001\002\000\004\020\165\001" +
    "\002\000\004\002\000\001\002\000\004\017\167\001\002" +
    "\000\004\020\ufff5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\002\003\001\001\000\002\001\001\000" +
    "\006\003\005\004\006\001\001\000\006\011\163\012\162" +
    "\001\001\000\006\003\160\004\006\001\001\000\004\005" +
    "\010\001\001\000\002\001\001\000\004\006\012\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\010\017\013\035\014\033\020\036" +
    "\022\023\023\022\024\041\025\043\026\045\027\026\030" +
    "\031\041\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\153\043\130\044\114\001\001\000\032\010" +
    "\152\013\035\014\033\020\036\022\023\023\022\024\041" +
    "\025\043\026\045\027\026\030\031\041\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\042\126\043\130\044\114\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\007\076\010\075" +
    "\013\035\014\033\020\036\022\023\023\022\024\041\025" +
    "\043\026\045\027\026\030\031\041\042\001\001\000\032" +
    "\010\070\013\035\014\033\020\036\022\023\023\022\024" +
    "\041\025\043\026\045\027\026\030\031\041\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\032\056\033\051" +
    "\034\047\035\046\036\053\037\054\040\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\032\063\033\051\034\047\035\046\036\053\037\054\040" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\032\066\033\051\034\047\035\046\036\053\037\054\040" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\016\072\017\073\001\001\000\002\001\001\000\032\010" +
    "\074\013\035\014\033\020\036\022\023\023\022\024\041" +
    "\025\043\026\045\027\026\030\031\041\042\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\007\101\010\075\013" +
    "\035\014\033\020\036\022\023\023\022\024\041\025\043" +
    "\026\045\027\026\030\031\041\042\001\001\000\002\001" +
    "\001\000\022\031\103\032\104\033\051\034\047\035\046" +
    "\036\053\037\054\040\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\042\151\043\130\044\114" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\042\147\043\130\044\114\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\141\045\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\032\137\033\051\034\047\035\046\036" +
    "\053\037\054\040\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\042\146\043\130\044\114\001\001\000\002" +
    "\001\001\000\004\045\144\001\001\000\004\045\144\001" +
    "\001\000\002\001\001\000\004\045\144\001\001\000\002" +
    "\001\001\000\006\021\155\045\144\001\001\000\002\001" +
    "\001\000\032\010\156\013\035\014\033\020\036\022\023" +
    "\023\022\024\041\025\043\026\045\027\026\030\031\041" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\007\165\010\075\013" +
    "\035\014\033\020\036\022\023\023\022\024\041\025\043" +
    "\026\045\027\026\030\031\041\042\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    docSize = 0;
    parsedDoc = new ArrayList();
    row = new ArrayList();
    addDoc("",0);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = getScanner().next_token();
    while(s.sym == Symbols.COMMENT){
        s = getScanner().next_token();
    }
    // System.out.println(s.sym);
    return s;

    }

    

    public HashMap<Integer,String> symbols;

    public Integer docSize;

    private Integer state;
    
    public String errors;
    
    public boolean giveMeInt = false;

    public void addDoc(String s, Integer i){
        parsedDoc.add(s);
        row.add(i);
        docSize++;
    }

    public void setDoc(String s, Integer i, Integer addr){
        parsedDoc.set(addr,s);
        row.set(addr,i);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
        if(cur_token.sym != 1){
            Symbols s = new Symbols();
            Field[] syms = s.getClass().getFields();
            symbols = new HashMap();
            for(Field f : syms){
                try {
                    symbols.put(f.getInt(s), f.getName());
                } catch (Exception e) {}
            }
            if(cur_token.left == -1)
                throw new java.lang.Exception("Syntax error: Unexpected EOF.");
            short[] row = action_tab[state];
            String ex = "Syntax error: Unexpected <" + symbols.get(cur_token.sym) + "> at line: " + (cur_token.left +1) + ".\nExpected:\n";
            for(int i = 0; i < row.length -1; i++){
                String str = symbols.get((int)row[i]);
                if (str != null)
                    ex += ("<"+symbols.get((int)row[i])+">\n");
            }
            throw new java.lang.Exception(ex);
        }
    }
    
    public void syntax_error(Symbol cur_token) {
        if(cur_token.sym != 1){
                        Symbols s = new Symbols();
            Field[] syms = s.getClass().getFields();
            symbols = new HashMap();
            for(Field f : syms){
                try {
                    symbols.put(f.getInt(s), f.getName());
                } catch (Exception e) {}
            }
            this.state = ((Symbol)stack.peek()).parse_state;
            short[] row = action_tab[state];
            String ex = "Syntax error: Unexpected <" + symbols.get(cur_token.sym) + "> at line: " + (cur_token.left +1) + ".\nExpected:\n";
            for(short r : row){
                ex += ("<"+symbols.get((int)r)+">\n");
            }
            report_error(ex,cur_token.left);
        }
    }

    public void report_fatal_error(String message, Object info) throws java.lang.Exception{
        throw new java.lang.Exception(message);
    }

    public void report_error(String message, Object info){
        Integer s = Integer.parseInt(info.toString());
        errors += ("Error: " + message + " In line: " + (s+1) + "\n");
    }

    public static void main(String args[]) throws Exception 
    {
        Lexer lexer = new Lexer(System.in);
        Parser parser = new Parser(lexer);
        parser.parse();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    private String contextParam = "";
    private HashMap<String,Integer> customInst = new HashMap();
    private HashMap<String,Integer> customParamInst = new HashMap();
    private boolean inInst = false;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conjunction ::= OR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("OR",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunction",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conjunction ::= AND 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("AND",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunction",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // not ::= NOT 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOT",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ifzerokey ::= IFZERO 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("IFZERO",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifzerokey",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conditional ::= NOFACINGW 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGW",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conditional ::= NOFACINGE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGE",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conditional ::= NOFACINGS 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGS",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conditional ::= NOFACINGN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGN",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conditional ::= FACINGW 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGW",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conditional ::= FACINGE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGE",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conditional ::= FACINGS 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGS",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // conditional ::= FACINGN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGN",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // conditional ::= NOBBAG 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOBBAG",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // conditional ::= ANYBBAG 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("ANYBBAG",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conditional ::= NONEXTB 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NONEXTB",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conditional ::= NEXTB 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NEXTB",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conditional ::= CRBLOCK 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CRBLOCK",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conditional ::= CRCLEAR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CRCLEAR",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // conditional ::= CLBLOCK 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CLBLOCK",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conditional ::= CLCLEAR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CLCLEAR",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // conditional ::= CFBLOCK 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CFBLOCK",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // conditional ::= CFCLEAR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CFCLEAR",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // conditional ::= LPAREN conditional RPAREN 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // conditional ::= conditional conjunction conditional 
            {
              Integer RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer c1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c1 + c2 + 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // conditional ::= not conditional 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c + 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // conditional ::= ifzerokey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = 1 + a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // act ::= TURNOFF 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("TURNOFF",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // act ::= TURNLEFT 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("TURNLEFT",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // act ::= PUTBPR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("PUTBPR",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // act ::= PICKBPR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("PICKBPR",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // act ::= MOVE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("MOVE",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // succkey ::= SUCC 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("SUCC",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("succkey",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // succ ::= succkey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p+1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("succ",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // predkey ::= PRED 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("PRED",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predkey",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pred ::= predkey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p+1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pred",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // modifier ::= succ 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // modifier ::= pred 
            {
              Integer RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // number ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            parser.addDoc(n.toString(),nleft); 
                            RESULT = 1; 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // arg ::= NAME 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            if(contextParam.compareTo(n) != 0){
                                RESULT = 0;
                                parser.report_error("Undefined parameter.",(Object)nleft);
                            }else{
                                parser.addDoc("PARAM",nleft); 
                                RESULT = 1;
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // arg ::= modifier 
            {
              Integer RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // arg ::= number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // args ::= arg 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // custom_p_statement ::= NAME 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Integer i = customInst.get(n);
                            if(i != null){
                                RESULT = 0;
                                parser.report_error(n + " has too many arguments.",(Object)nleft);
                            }else{
                                Integer j = customParamInst.get(n);
                                if(j != null){
                                    parser.addDoc("PARAMCALL",nleft);
                                    parser.addDoc(j.toString(),nleft);
                                    RESULT = 2;
                                }else{
                                    RESULT = 0;
                                    parser.report_error(n + " is not defined previously.",(Object)nleft);
                                }
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_p_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // custom_statement ::= NAME 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Integer i = customInst.get(n);
                            if(i != null){
                                parser.addDoc("CALL",nleft);
                                parser.addDoc(i.toString(),nleft);
                                RESULT = 2;
                            }else{
                                Integer j = customParamInst.get(n);
                                if(j != null){
                                    RESULT = 0;
                                    parser.report_error(n + " need arguments.",(Object)nleft);
                                }else{
                                    RESULT = 0;
                                    parser.report_error(n + " is not defined previously.",(Object)nleft);
                                }
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_statement",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // structure ::= iterate 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structure",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // structure ::= while 
            {
              Integer RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structure",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // structure ::= if 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structure",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // common_statement ::= EXITINST 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            if(inInst == false){
                                RESULT = 0;
                                parser.report_error("Exit instruction in main.",(Object)eleft);
                            }else{
                                RESULT = 1;
                                parser.addDoc("EXITINST",eleft); 
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // common_statement ::= custom_p_statement LPAREN args RPAREN 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s+p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // common_statement ::= custom_statement 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // common_statement ::= act 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // common_statement ::= structure 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // common_statement ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // iteratekey ::= ITERATE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("ITERATE",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteratekey",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // iteratehead ::= iteratekey arg TIMES 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                            parser.addDoc("",tleft); 
                            RESULT = 1 + n + 1;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteratehead",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // iterate ::= iteratehead statement 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        parser.addDoc("RETURN",tleft); 
                        RESULT = t + i + 1;
                        parser.setDoc(parser.docSize.toString(),tleft,parser.docSize-(t+2)); 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterate",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // dokey ::= DO 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("CONDBRANCH",tleft);
                            parser.addDoc("",tleft);
                            RESULT = 2;

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dokey",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // while ::= WHILE conditional dokey statement 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("BRANCH",sleft);
                            RESULT = c + d + s + 2;
                            parser.addDoc((new Integer(parser.docSize - (s+4))).toString(),sleft);
                            parser.setDoc(parser.docSize.toString(),sleft,parser.docSize-(s+3));

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // elsekey ::= ELSE 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("BRANCH",tleft);
                            parser.addDoc("",tleft);
                            RESULT = 2;

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsekey",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // elsepart ::= elsekey 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsepart",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // thenkey ::= THEN 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("CONDBRANCH",tleft);
                            parser.addDoc("",tleft);
                            RESULT = 2;

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("thenkey",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ifpart ::= IF conditional thenkey 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            RESULT = c+t;  
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifpart",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // if ::= ifpart statement 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            RESULT = i + s1;
                            parser.setDoc(new Integer(parser.docSize).toString(),ileft,parser.docSize-(s1+1));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // if ::= ifpart statement elsepart statement 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            RESULT = i + s1 + e + s2;
                            parser.setDoc(new Integer(parser.docSize-s2).toString(),ileft,parser.docSize-((e + s1 + s2)+1));
                            parser.setDoc(new Integer(parser.docSize).toString(),eleft,parser.docSize-(s2+1));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // begexeckey ::= BEGEXEC 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.setDoc(parser.docSize.toString(),eleft,0); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("begexeckey",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // execution ::= begexeckey statement_list ENDEXEC 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("execution",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // statement_list ::= statement 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // statement_list ::= statement SEMICOL statement_list 
            {
              Integer RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s1+s2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // statement ::= common_statement 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // statement ::= BEGIN statement_list END 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // defparameter ::= LPAREN NAME RPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 contextParam = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defparameter",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // new_statement ::= NAME 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 customInst.put(n,parser.docSize); inInst = true; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // new_statement ::= NAME defparameter 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 customParamInst.put(n,parser.docSize); inInst = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("new_statement",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // definition ::= DEFINST new_statement AS statement SEMICOL 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("RETURN",sleft); inInst = false;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // definition_list ::= definition definition_list 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // definition_list ::= 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("definition_list",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= BEGPROG definition_list execution ENDPROG 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

