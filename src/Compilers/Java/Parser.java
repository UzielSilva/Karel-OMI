
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Feb 05 09:49:30 UTC 2014
//----------------------------------------------------

package Compilers.Java;

import Compilers.Box;
import java.util.Map.Entry;
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Feb 05 09:49:30 UTC 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\124\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\004\007\000\002\005\002\000\002\005\004" +
    "\000\002\006\005\000\002\007\004\000\002\007\003\000" +
    "\002\010\005\000\002\011\004\000\002\012\004\000\002" +
    "\012\003\000\002\013\005\000\002\014\005\000\002\014" +
    "\003\000\002\015\004\000\002\015\005\000\002\016\006" +
    "\000\002\016\004\000\002\017\006\000\002\020\003\000" +
    "\002\021\003\000\002\022\003\000\002\023\007\000\002" +
    "\024\003\000\002\025\004\000\002\026\006\000\002\027" +
    "\003\000\002\030\002\000\002\030\003\000\002\030\005" +
    "\000\002\030\004\000\002\030\005\000\002\030\005\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\032\004\000\002\033\004\000\002\034\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\036\003" +
    "\000\002\037\003\000\002\037\003\000\002\040\006\000" +
    "\002\041\003\000\002\042\006\000\002\043\003\000\002" +
    "\044\003\000\002\044\003\000\002\044\003\000\002\044" +
    "\003\000\002\044\003\000\002\051\003\000\002\051\003" +
    "\000\002\045\006\000\002\045\004\000\002\045\005\000" +
    "\002\045\005\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\045\003\000\002" +
    "\045\003\000\002\045\003\000\002\045\003\000\002\046" +
    "\003\000\002\047\003\000\002\050\003\000\002\050\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\011\005\001\002\000\004\002\211\001" +
    "\002\000\004\056\007\001\002\000\004\007\010\001\002" +
    "\000\004\007\uffff\001\002\000\010\012\015\013\014\056" +
    "\ufffd\001\002\000\004\002\000\001\002\000\004\056\206" +
    "\001\002\000\004\056\021\001\002\000\004\056\uffc8\001" +
    "\002\000\004\056\uffc9\001\002\000\012\010\ufffd\012\015" +
    "\013\014\056\ufffd\001\002\000\006\010\ufffc\056\ufffc\001" +
    "\002\000\010\010\ufffd\012\015\013\014\001\002\000\006" +
    "\005\200\007\ufff5\001\002\000\004\007\023\001\002\000" +
    "\032\004\uffe4\010\uffe4\015\034\016\033\017\026\025\035" +
    "\026\052\027\043\030\045\031\041\032\025\056\031\001" +
    "\002\000\010\010\ufff7\012\ufff7\013\ufff7\001\002\000\004" +
    "\005\uffca\001\002\000\004\005\172\001\002\000\032\004" +
    "\uffe4\007\107\015\034\016\033\017\026\025\035\026\052" +
    "\027\043\030\045\031\041\032\025\056\031\001\002\000" +
    "\006\004\uffdc\010\uffdc\001\002\000\004\005\170\001\002" +
    "\000\004\006\167\001\002\000\004\005\uffe5\001\002\000" +
    "\004\005\122\001\002\000\004\005\120\001\002\000\032" +
    "\004\uffe4\007\107\015\034\016\033\017\026\025\035\026" +
    "\052\027\043\030\045\031\041\032\025\056\031\001\002" +
    "\000\012\020\072\021\064\056\071\060\062\001\002\000" +
    "\004\010\102\001\002\000\004\005\uffcb\001\002\000\006" +
    "\004\uffde\010\uffde\001\002\000\004\005\uffcd\001\002\000" +
    "\006\004\uffdd\010\uffdd\001\002\000\004\005\uffcc\001\002" +
    "\000\004\005\057\001\002\000\004\005\055\001\002\000" +
    "\006\004\053\010\ufff2\001\002\000\006\004\uffe3\010\uffe3" +
    "\001\002\000\004\005\uffce\001\002\000\032\004\uffe4\010" +
    "\uffe4\015\034\016\033\017\026\025\035\026\052\027\043" +
    "\030\045\031\041\032\025\056\031\001\002\000\004\010" +
    "\ufff3\001\002\000\004\006\056\001\002\000\006\004\uffe2" +
    "\010\uffe2\001\002\000\012\020\072\021\064\056\071\060" +
    "\062\001\002\000\004\006\uffd4\001\002\000\004\006\uffd7" +
    "\001\002\000\004\006\uffd5\001\002\000\004\006\uffd8\001" +
    "\002\000\004\005\uffcf\001\002\000\004\005\077\001\002" +
    "\000\004\006\uffd3\001\002\000\004\005\074\001\002\000" +
    "\004\006\073\001\002\000\004\006\uffd6\001\002\000\004" +
    "\005\uffd1\001\002\000\032\004\uffe6\007\uffe6\015\uffe6\016" +
    "\uffe6\017\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\056\uffe6\001\002\000\012\020\072\021\064\056" +
    "\071\060\062\001\002\000\004\006\076\001\002\000\004" +
    "\006\uffd0\001\002\000\012\020\072\021\064\056\071\060" +
    "\062\001\002\000\004\006\101\001\002\000\004\006\uffd2" +
    "\001\002\000\012\010\ufff4\012\ufff4\013\ufff4\056\ufff4\001" +
    "\002\000\004\006\105\001\002\000\004\006\uffd9\001\002" +
    "\000\006\004\uffe0\010\uffe0\001\002\000\010\004\uffee\010" +
    "\uffee\014\114\001\002\000\032\004\uffe4\010\uffe4\015\034" +
    "\016\033\017\026\025\035\026\052\027\043\030\045\031" +
    "\041\032\025\056\031\001\002\000\004\004\111\001\002" +
    "\000\010\004\ufff1\010\ufff1\014\ufff1\001\002\000\004\010" +
    "\113\001\002\000\010\004\ufff0\010\ufff0\014\ufff0\001\002" +
    "\000\032\004\uffea\007\uffea\015\uffea\016\uffea\017\uffea\025" +
    "\uffea\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\056\uffea" +
    "\001\002\000\032\004\uffe4\007\107\015\034\016\033\017" +
    "\026\025\035\026\052\027\043\030\045\031\041\032\025" +
    "\056\031\001\002\000\032\004\uffeb\007\uffeb\015\uffeb\016" +
    "\uffeb\017\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb" +
    "\032\uffeb\056\uffeb\001\002\000\006\004\uffef\010\uffef\001" +
    "\002\000\004\006\121\001\002\000\006\004\uffdf\010\uffdf" +
    "\001\002\000\054\005\140\024\132\033\147\034\141\035" +
    "\142\036\135\037\137\040\125\041\134\042\146\043\127" +
    "\044\126\045\130\046\123\047\136\050\151\051\124\052" +
    "\152\053\133\054\150\055\144\001\002\000\010\006\uffb8" +
    "\022\uffb8\023\uffb8\001\002\000\010\006\uffb5\022\uffb5\023" +
    "\uffb5\001\002\000\010\006\uffbe\022\uffbe\023\uffbe\001\002" +
    "\000\010\006\uffba\022\uffba\023\uffba\001\002\000\010\006" +
    "\uffbb\022\uffbb\023\uffbb\001\002\000\010\006\uffb9\022\uffb9" +
    "\023\uffb9\001\002\000\054\005\140\024\132\033\147\034" +
    "\141\035\142\036\135\037\137\040\125\041\134\042\146" +
    "\043\127\044\126\045\130\046\123\047\136\050\151\051" +
    "\124\052\152\053\133\054\150\055\144\001\002\000\054" +
    "\005\uffb0\024\uffb0\033\uffb0\034\uffb0\035\uffb0\036\uffb0\037" +
    "\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0\045\uffb0" +
    "\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053\uffb0\054" +
    "\uffb0\055\uffb0\001\002\000\010\006\uffb3\022\uffb3\023\uffb3" +
    "\001\002\000\010\006\uffbd\022\uffbd\023\uffbd\001\002\000" +
    "\010\006\uffc0\022\uffc0\023\uffc0\001\002\000\010\006\uffb7" +
    "\022\uffb7\023\uffb7\001\002\000\010\006\uffbf\022\uffbf\023" +
    "\uffbf\001\002\000\054\005\140\024\132\033\147\034\141" +
    "\035\142\036\135\037\137\040\125\041\134\042\146\043" +
    "\127\044\126\045\130\046\123\047\136\050\151\051\124" +
    "\052\152\053\133\054\150\055\144\001\002\000\010\006" +
    "\uffc2\022\uffc2\023\uffc2\001\002\000\010\006\uffc1\022\uffc1" +
    "\023\uffc1\001\002\000\010\006\157\022\160\023\162\001" +
    "\002\000\004\005\uffb1\001\002\000\004\005\153\001\002" +
    "\000\010\006\uffbc\022\uffbc\023\uffbc\001\002\000\010\006" +
    "\uffc3\022\uffc3\023\uffc3\001\002\000\010\006\uffb2\022\uffb2" +
    "\023\uffb2\001\002\000\010\006\uffb6\022\uffb6\023\uffb6\001" +
    "\002\000\010\006\uffb4\022\uffb4\023\uffb4\001\002\000\012" +
    "\020\072\021\064\056\071\060\062\001\002\000\004\006" +
    "\155\001\002\000\010\006\uffc7\022\uffc7\023\uffc7\001\002" +
    "\000\032\004\uffed\007\uffed\015\uffed\016\uffed\017\uffed\025" +
    "\uffed\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\056\uffed" +
    "\001\002\000\032\004\uffec\007\uffec\015\uffec\016\uffec\017" +
    "\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\056\uffec\001\002\000\054\005\uffaf\024\uffaf\033\uffaf\034" +
    "\uffaf\035\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf" +
    "\043\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051" +
    "\uffaf\052\uffaf\053\uffaf\054\uffaf\055\uffaf\001\002\000\054" +
    "\005\140\024\132\033\147\034\141\035\142\036\135\037" +
    "\137\040\125\041\134\042\146\043\127\044\126\045\130" +
    "\046\123\047\136\050\151\051\124\052\152\053\133\054" +
    "\150\055\144\001\002\000\054\005\uffae\024\uffae\033\uffae" +
    "\034\uffae\035\uffae\036\uffae\037\uffae\040\uffae\041\uffae\042" +
    "\uffae\043\uffae\044\uffae\045\uffae\046\uffae\047\uffae\050\uffae" +
    "\051\uffae\052\uffae\053\uffae\054\uffae\055\uffae\001\002\000" +
    "\010\006\uffc5\022\160\023\162\001\002\000\010\006\165" +
    "\022\160\023\162\001\002\000\010\006\uffc4\022\uffc4\023" +
    "\uffc4\001\002\000\010\006\uffc6\022\160\023\162\001\002" +
    "\000\006\004\uffe1\010\uffe1\001\002\000\014\006\uffdb\020" +
    "\uffda\021\uffda\056\uffda\060\uffda\001\002\000\006\004\uffe7" +
    "\010\uffe7\001\002\000\054\005\140\024\132\033\147\034" +
    "\141\035\142\036\135\037\137\040\125\041\134\042\146" +
    "\043\127\044\126\045\130\046\123\047\136\050\151\051" +
    "\124\052\152\053\133\054\150\055\144\001\002\000\010" +
    "\006\174\022\160\023\162\001\002\000\032\004\uffe8\007" +
    "\uffe8\015\uffe8\016\uffe8\017\uffe8\025\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\032\uffe8\056\uffe8\001\002\000\032\004" +
    "\uffe4\007\107\015\034\016\033\017\026\025\035\026\052" +
    "\027\043\030\045\031\041\032\025\056\031\001\002\000" +
    "\006\004\uffe9\010\uffe9\001\002\000\004\007\ufff6\001\002" +
    "\000\004\056\201\001\002\000\004\006\202\001\002\000" +
    "\004\007\ufff8\001\002\000\004\010\204\001\002\000\004" +
    "\002\ufffe\001\002\000\004\007\023\001\002\000\006\005" +
    "\200\007\ufff9\001\002\000\004\007\ufffa\001\002\000\012" +
    "\010\ufffb\012\ufffb\013\ufffb\056\ufffb\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\207\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\004\010\001\001\000\002" +
    "\001\001\000\010\005\012\006\015\051\011\001\001\000" +
    "\002\001\001\000\004\007\204\001\001\000\006\011\017" +
    "\012\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\016\006\015\051\011\001\001\000\002\001\001" +
    "\000\010\005\202\006\015\051\011\001\001\000\004\010" +
    "\176\001\001\000\004\013\023\001\001\000\032\014\037" +
    "\016\041\017\035\023\043\025\027\026\026\027\045\030" +
    "\047\031\050\032\031\033\036\044\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\015" +
    "\170\016\041\017\035\023\043\025\027\026\026\027\045" +
    "\030\107\031\050\032\031\033\036\044\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\032\015" +
    "\105\016\041\017\035\023\043\025\027\026\026\027\045" +
    "\030\107\031\050\032\031\033\036\044\046\001\001\000" +
    "\022\034\102\035\103\036\062\037\060\040\057\041\064" +
    "\042\065\043\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\032" +
    "\014\053\016\041\017\035\023\043\025\027\026\026\027" +
    "\045\030\047\031\050\032\031\033\036\044\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\035\067\036\062\037\060\040\057\041\064\042\065" +
    "\043\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\035\074\036\062\037\060\040\057\041\064\042" +
    "\065\043\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\035\077\036\062\037\060\040\057\041\064\042" +
    "\065\043\066\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\114\022\115\001\001\000\032" +
    "\014\111\016\041\017\035\023\043\025\027\026\026\027" +
    "\045\030\047\031\050\032\031\033\036\044\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\032\015\116\016\041" +
    "\017\035\023\043\025\027\026\026\027\045\030\107\031" +
    "\050\032\031\033\036\044\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\045\142\046\144\047\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\045\165\046\144" +
    "\047\130\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\045\163\046\144\047\130\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\020\155\050\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\035\153\036\062\037\060\040" +
    "\057\041\064\042\065\043\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\045\162\046\144\047\130\001\001" +
    "\000\002\001\001\000\004\050\160\001\001\000\004\050" +
    "\160\001\001\000\002\001\001\000\004\050\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\045\172\046\144\047\130\001\001\000\006\024\174" +
    "\050\160\001\001\000\002\001\001\000\032\015\175\016" +
    "\041\017\035\023\043\025\027\026\026\027\045\030\107" +
    "\031\050\032\031\033\036\044\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\207\001\001\000\004\010\206\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    docSize = 0;
    parsedDoc = new ArrayList();
    row = new ArrayList();
    addDoc("",0);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = getScanner().next_token();
    while(s.sym == Symbols.COMMENT){
        s = getScanner().next_token();
    }
    // System.out.println(s.sym);
    return s;

    }

    

    public ArrayList<String> parsedDoc;

    public ArrayList<Integer> row;

    public Integer docSize;

    public String errors;
    
    public boolean giveMeInt = false;

    public void addDoc(String s, Integer i){
        parsedDoc.add(s);
        row.add(i);
        docSize++;
    }

    public void setDoc(String s, Integer i, Integer addr){
        parsedDoc.set(addr,s);
        row.set(addr,i);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
        if(cur_token.sym != 1){
            String s = (new Box(lang)).getType(cur_token.sym);
            if(cur_token.left == -1)
                throw new java.lang.Exception("Syntax error: Unexpected EOF.");
            throw new java.lang.Exception("Syntax error: Unexpected " + s + " at line: " + (cur_token.left +1) + ".");

        }
    }
    
    private Box.Language lang;
    
    public void setLanguage(Box.Language lang){
        this.lang = lang;
    }
    
    public void syntax_error(Symbol cur_token) {
        if(cur_token.sym != 1){
            String s = (new Box(lang)).getType(cur_token.sym);
            report_error("Syntax error: Unexpected " + s + " at line: " + (cur_token.left +1) + ".",cur_token);

        }
    }

    public void report_fatal_error(String message, Object info) throws java.lang.Exception{
        throw new java.lang.Exception(message);
    }

    public void report_error(String message, Object info){
        Integer s = Integer.parseInt(info.toString());
        errors += ("Error: " + message + " In line: " + (s+1) + "\n");
    }

    public static void main(String args[]) throws Exception 
    {
        Lexer lexer = new Lexer(System.in);
        Parser parser = new Parser(lexer);
        parser.parse();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    private String contextParam = "";
    private HashMap<String,Integer> customMethod = new HashMap();
    private HashMap<String,Integer> customParamMethod = new HashMap();
    private HashMap<String,Integer> requestMethod = new HashMap();
    private HashMap<String,Integer> requestParamMethod = new HashMap();
    private String classname = "";
    private boolean inMethod = false;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // conjunction ::= OR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("OR",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunction",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // conjunction ::= AND 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("AND",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunction",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // not ::= NOT 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOT",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ifzerokey ::= IFZERO 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("IFZERO",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifzerokey",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conditional ::= NOFACINGW 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGW",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conditional ::= NOFACINGE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGE",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conditional ::= NOFACINGS 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGS",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conditional ::= NOFACINGN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGN",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // conditional ::= FACINGW 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGW",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conditional ::= FACINGE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGE",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conditional ::= FACINGS 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGS",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conditional ::= FACINGN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGN",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conditional ::= NOBBAG 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOBBAG",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conditional ::= ANYBBAG 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("ANYBBAG",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conditional ::= NONEXTB 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NONEXTB",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conditional ::= NEXTB 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NEXTB",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conditional ::= CRBLOCK 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CRBLOCK",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // conditional ::= CRCLEAR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CRCLEAR",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // conditional ::= CLBLOCK 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CLBLOCK",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // conditional ::= CLCLEAR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CLCLEAR",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conditional ::= CFBLOCK 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CFBLOCK",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conditional ::= CFCLEAR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CFCLEAR",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conditional ::= LPAREN conditional RPAREN 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conditional ::= conditional conjunction conditional 
            {
              Integer RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer c1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c1 + c2 + 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // conditional ::= not conditional 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c + 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // conditional ::= ifzerokey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = 1 + a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // type ::= DEFINE 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // type ::= VOID 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // act ::= TURNOFF 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("TURNOFF",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // act ::= TURNLEFT 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("TURNLEFT",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // act ::= PUTBPR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("PUTBPR",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // act ::= PICKBPR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("PICKBPR",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // act ::= MOVE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("MOVE",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // succkey ::= SUCC 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("SUCC",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("succkey",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // succ ::= succkey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p+1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("succ",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // predkey ::= PRED 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("PRED",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predkey",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // pred ::= predkey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p+1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pred",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // modifier ::= succ 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // modifier ::= pred 
            {
              Integer RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // number ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            parser.addDoc(n.toString(),nleft); 
                            RESULT = 1; 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arg ::= NAME 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            if(contextParam.compareTo(n) != 0){
                                RESULT = 0;
                                parser.report_error("Undefined parameter.",(Object)nleft);
                            }else{
                                parser.addDoc("PARAM",nleft); 
                                RESULT = 1;
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // arg ::= modifier 
            {
              Integer RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // arg ::= number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // args ::= arg 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // custom_p_statement ::= NAME LPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            parser.addDoc("PARAMCALL",nleft);
                            requestParamMethod.put(n,parser.docSize);
                            parser.addDoc("",nleft);
                            RESULT = 2;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_p_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // custom_statement ::= NAME LPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            parser.addDoc("CALL",nleft);
                            requestMethod.put(n,parser.docSize);
                            parser.addDoc("",nleft);
                            RESULT = 2;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_statement",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // structure ::= iterate 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structure",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // structure ::= while 
            {
              Integer RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structure",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // structure ::= if 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structure",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // common_statement ::= EXITINST LPAREN RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                            if(inMethod == false){
                                RESULT = 0;
                                parser.report_error("Exit instruction in main.",(Object)eleft);
                            }else{
                                RESULT = 1;
                                parser.addDoc("RETURN",eleft); 
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // common_statement ::= custom_p_statement args RPAREN 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s+p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // common_statement ::= custom_statement RPAREN 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // common_statement ::= act LPAREN RPAREN 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // common_statement ::= structure 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // common_statement ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // iteratekey ::= ITERATE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("ITERATE",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteratekey",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // iteratehead ::= iteratekey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                            parser.addDoc("",tleft); 
                            RESULT = 1 + n + 1;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteratehead",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // iterate ::= iteratehead statement 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        parser.addDoc("RETURN",tleft); 
                        RESULT = t + i + 1;
                        parser.setDoc(parser.docSize.toString(),tleft,parser.docSize-(t+2)); 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterate",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // dokey ::= RPAREN 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("CONDBRANCH",tleft);
                            parser.addDoc("",tleft);
                            RESULT = 2;

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dokey",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // while ::= WHILE LPAREN conditional dokey statement 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("BRANCH",sleft);
                            RESULT = 1 + c + d + s + 2;
                            parser.addDoc((new Integer(parser.docSize - RESULT + 2)).toString(),sleft);
                            parser.setDoc(parser.docSize.toString(),sleft,parser.docSize-(s+3));

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // elsekey ::= ELSE 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("BRANCH",tleft);
                            parser.addDoc("",tleft);
                            RESULT = 2;

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsekey",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // elsepart ::= elsekey 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsepart",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // thenkey ::= RPAREN 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("CONDBRANCH",tleft);
                            parser.addDoc("",tleft);
                            RESULT = 2;

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("thenkey",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ifpart ::= IF LPAREN conditional thenkey 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            RESULT = c+t;  
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifpart",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // if ::= ifpart statement 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            RESULT = i + s1;
                            parser.setDoc(new Integer(parser.docSize).toString(),ileft,parser.docSize-(s1+1));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // if ::= ifpart statement elsepart statement 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            RESULT = i + s1 + e + s2;
                            parser.setDoc(new Integer(parser.docSize-s2).toString(),ileft,parser.docSize-((e + s1 + s2)+1));
                            parser.setDoc(new Integer(parser.docSize).toString(),eleft,parser.docSize-(s2+1));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // statement ::= LKEY statement_list RKEY 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement ::= common_statement SEMICOL 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement_list ::= common_statement 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement_list ::= common_statement SEMICOL statement_list 
            {
              Integer RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s1+s2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // block ::= LKEY statement_list RKEY 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_const ::= NAME 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            
                            if (classname != n)
                                parser.report_error(n + " is not the name of the class.",(Object)nleft);
                            customMethod.put(n,parser.docSize);
                            RESULT = nleft;
                            parser.setDoc(parser.docSize.toString(),nleft,0);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_const ::= NAME defparameter 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                            if (classname != n)
                                parser.report_error(n + " is not the name of the class.",(Object)nleft);
                            parser.giveMeInt = true;
                            customParamMethod.put(n,parser.docSize);
                            RESULT = nleft;
                            parser.setDoc(parser.docSize.toString(),nleft,0);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constructor ::= method_const block 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defparameter ::= LPAREN NAME RPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 contextParam = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defparameter",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_declarator ::= NAME 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            customMethod.put(n,parser.docSize); inMethod = true; 
                            RESULT = nleft;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declarator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_declarator ::= NAME defparameter 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                            customParamMethod.put(n,parser.docSize); inMethod = true;
                            RESULT = nleft;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declarator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method_declaration ::= type method_declarator block 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("RETURN",sleft); inMethod = false;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= method_declaration declarations 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_body ::= LKEY declarations constructor declarations RKEY 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_body",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_name ::= NAME 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            classname = s;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_name",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= CLASS class_name class_body 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Entry<String,Integer>[] rMethods = requestMethod.entrySet().toArray(new Entry[0]);
                            
                            for(Entry<String,Integer> e : rMethods){
                                Integer dir = customMethod.get(e.getKey());
                                Integer r = parser.row.get(e.getValue());
                                if (dir == null)
                                    parser.report_error(n + " is not defined previously or has too many args.",(Object)r);
                                else{
                                    parser.setDoc(dir.toString(),r,e.getValue());
                                }
                            }
                            
                            Entry<String,Integer>[] pRMethods = requestParamMethod.entrySet().toArray(new Entry[0]);
                            
                            for(Entry<String,Integer> e : pRMethods){
                                Integer dir = customParamMethod.get(e.getKey());
                                Integer r = parser.row.get(e.getValue());
                                if (dir == null)
                                    parser.report_error(n + " is not defined previously or has too many args.",(Object)r);
                                else{
                                    parser.setDoc(dir.toString(),r,e.getValue());
                                }
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

