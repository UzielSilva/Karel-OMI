
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 10 18:11:18 UTC 2014
//----------------------------------------------------

package Compilers.Java;

import java.util.Map.Entry;
import java_cup.runtime.*;
import java.lang.reflect.Field;
import java.util.HashMap;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 10 18:11:18 UTC 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\004\000\002\002\005\000\002\003" +
    "\003\000\002\004\007\000\002\005\002\000\002\005\004" +
    "\000\002\006\005\000\002\007\004\000\002\007\005\000" +
    "\002\010\005\000\002\011\004\000\002\012\004\000\002" +
    "\012\005\000\002\013\005\000\002\014\004\000\002\014" +
    "\004\000\002\014\003\000\002\016\004\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\017\006\000" +
    "\002\017\004\000\002\020\006\000\002\021\003\000\002" +
    "\022\003\000\002\023\003\000\002\024\007\000\002\025" +
    "\003\000\002\026\004\000\002\027\006\000\002\030\003" +
    "\000\002\031\002\000\002\031\005\000\002\031\004\000" +
    "\002\031\005\000\002\031\005\000\002\032\003\000\002" +
    "\032\003\000\002\032\003\000\002\033\004\000\002\034" +
    "\004\000\002\035\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\037\003\000\002\040\003\000" +
    "\002\040\003\000\002\041\006\000\002\042\003\000\002" +
    "\043\006\000\002\044\003\000\002\045\003\000\002\045" +
    "\003\000\002\045\003\000\002\045\003\000\002\045\003" +
    "\000\002\052\003\000\002\052\003\000\002\046\006\000" +
    "\002\046\004\000\002\046\005\000\002\046\005\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\046\003\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003\000\002\046\003\000\002\046\003\000\002" +
    "\046\003\000\002\046\003\000\002\046\003\000\002\046" +
    "\003\000\002\046\003\000\002\047\003\000\002\050\003" +
    "\000\002\051\003\000\002\051\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\004\011\005\001\002\000\004\002\215\001" +
    "\002\000\004\056\007\001\002\000\004\007\010\001\002" +
    "\000\004\007\uffff\001\002\000\010\012\015\013\014\056" +
    "\ufffd\001\002\000\004\002\000\001\002\000\004\056\210" +
    "\001\002\000\004\056\021\001\002\000\004\056\uffc6\001" +
    "\002\000\004\056\uffc7\001\002\000\012\010\ufffd\012\015" +
    "\013\014\056\ufffd\001\002\000\006\010\ufffc\056\ufffc\001" +
    "\002\000\010\010\ufffd\012\015\013\014\001\002\000\004" +
    "\005\201\001\002\000\004\007\023\001\002\000\032\004" +
    "\uffe1\010\uffe1\015\034\016\033\017\026\025\035\026\053" +
    "\027\044\030\046\031\042\032\025\056\031\001\002\000" +
    "\010\010\ufff7\012\ufff7\013\ufff7\001\002\000\004\005\uffc8" +
    "\001\002\000\004\005\173\001\002\000\032\004\uffe1\007" +
    "\023\015\034\016\033\017\026\025\035\026\053\027\044" +
    "\030\046\031\042\032\025\056\031\001\002\000\034\004" +
    "\uffda\010\uffda\014\uffda\015\uffda\016\uffda\017\uffda\025\uffda" +
    "\026\uffda\027\uffda\030\uffda\031\uffda\032\uffda\056\uffda\001" +
    "\002\000\004\005\171\001\002\000\004\006\170\001\002" +
    "\000\004\005\uffe2\001\002\000\004\005\123\001\002\000" +
    "\004\005\121\001\002\000\032\004\uffe1\010\uffe1\015\034" +
    "\016\033\017\026\025\035\026\053\027\044\030\046\031" +
    "\042\032\025\056\031\001\002\000\032\004\uffe1\007\023" +
    "\015\034\016\033\017\026\025\035\026\053\027\044\030" +
    "\046\031\042\032\025\056\031\001\002\000\012\020\073" +
    "\021\065\056\072\060\063\001\002\000\004\010\103\001" +
    "\002\000\004\005\uffc9\001\002\000\034\004\uffdc\010\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\017\uffdc\025\uffdc\026\uffdc\027" +
    "\uffdc\030\uffdc\031\uffdc\032\uffdc\056\uffdc\001\002\000\004" +
    "\005\uffcb\001\002\000\034\004\uffdb\010\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb" +
    "\031\uffdb\032\uffdb\056\uffdb\001\002\000\004\005\uffca\001" +
    "\002\000\004\005\060\001\002\000\004\005\056\001\002" +
    "\000\006\004\055\010\ufff1\001\002\000\032\004\uffe1\010" +
    "\uffe1\015\034\016\033\017\026\025\035\026\053\027\044" +
    "\030\046\031\042\032\025\056\031\001\002\000\004\005" +
    "\uffcc\001\002\000\004\010\ufff2\001\002\000\034\004\ufff0" +
    "\010\ufff0\014\ufff0\015\ufff0\016\ufff0\017\ufff0\025\ufff0\026" +
    "\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\056\ufff0\001\002" +
    "\000\004\006\057\001\002\000\006\004\uffe0\010\uffe0\001" +
    "\002\000\012\020\073\021\065\056\072\060\063\001\002" +
    "\000\004\006\uffd2\001\002\000\004\006\uffd5\001\002\000" +
    "\004\006\uffd3\001\002\000\004\006\uffd6\001\002\000\004" +
    "\005\uffcd\001\002\000\004\005\100\001\002\000\004\006" +
    "\uffd1\001\002\000\004\005\075\001\002\000\004\006\074" +
    "\001\002\000\004\006\uffd4\001\002\000\004\005\uffcf\001" +
    "\002\000\032\004\uffe3\007\uffe3\015\uffe3\016\uffe3\017\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\056" +
    "\uffe3\001\002\000\012\020\073\021\065\056\072\060\063" +
    "\001\002\000\004\006\077\001\002\000\004\006\uffce\001" +
    "\002\000\012\020\073\021\065\056\072\060\063\001\002" +
    "\000\004\006\102\001\002\000\004\006\uffd0\001\002\000" +
    "\040\004\ufff4\010\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\016\ufff4\017\ufff4\025\ufff4\026\ufff4\027\ufff4\030\ufff4\031" +
    "\ufff4\032\ufff4\056\ufff4\001\002\000\004\006\106\001\002" +
    "\000\004\006\uffd7\001\002\000\006\004\uffde\010\uffde\001" +
    "\002\000\034\004\uffeb\010\uffeb\014\114\015\uffeb\016\uffeb" +
    "\017\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\031\uffeb\032" +
    "\uffeb\056\uffeb\001\002\000\034\004\uffed\010\uffed\014\uffed" +
    "\015\uffed\016\uffed\017\uffed\025\uffed\026\uffed\027\uffed\030" +
    "\uffed\031\uffed\032\uffed\056\uffed\001\002\000\034\004\uffef" +
    "\010\uffef\014\uffef\015\uffef\016\uffef\017\uffef\025\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\056\uffef\001\002" +
    "\000\004\004\055\001\002\000\034\004\uffee\010\uffee\014" +
    "\uffee\015\uffee\016\uffee\017\uffee\025\uffee\026\uffee\027\uffee" +
    "\030\uffee\031\uffee\032\uffee\056\uffee\001\002\000\032\004" +
    "\uffe7\007\uffe7\015\uffe7\016\uffe7\017\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\030\uffe7\031\uffe7\032\uffe7\056\uffe7\001\002\000" +
    "\032\004\uffe1\007\023\015\034\016\033\017\026\025\035" +
    "\026\053\027\044\030\046\031\042\032\025\056\031\001" +
    "\002\000\032\004\uffe8\007\uffe8\015\uffe8\016\uffe8\017\uffe8" +
    "\025\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\056" +
    "\uffe8\001\002\000\034\004\uffec\010\uffec\014\uffec\015\uffec" +
    "\016\uffec\017\uffec\025\uffec\026\uffec\027\uffec\030\uffec\031" +
    "\uffec\032\uffec\056\uffec\001\002\000\004\010\ufff3\001\002" +
    "\000\004\006\122\001\002\000\006\004\uffdd\010\uffdd\001" +
    "\002\000\054\005\141\024\133\033\150\034\142\035\143" +
    "\036\136\037\140\040\125\041\135\042\147\043\130\044" +
    "\127\045\131\046\124\047\137\050\152\051\126\052\153" +
    "\053\134\054\151\055\145\001\002\000\010\006\uffb6\022" +
    "\uffb6\023\uffb6\001\002\000\010\006\uffbc\022\uffbc\023\uffbc" +
    "\001\002\000\010\006\uffb3\022\uffb3\023\uffb3\001\002\000" +
    "\010\006\uffb8\022\uffb8\023\uffb8\001\002\000\010\006\uffb9" +
    "\022\uffb9\023\uffb9\001\002\000\010\006\uffb7\022\uffb7\023" +
    "\uffb7\001\002\000\054\005\141\024\133\033\150\034\142" +
    "\035\143\036\136\037\140\040\125\041\135\042\147\043" +
    "\130\044\127\045\131\046\124\047\137\050\152\051\126" +
    "\052\153\053\134\054\151\055\145\001\002\000\054\005" +
    "\uffae\024\uffae\033\uffae\034\uffae\035\uffae\036\uffae\037\uffae" +
    "\040\uffae\041\uffae\042\uffae\043\uffae\044\uffae\045\uffae\046" +
    "\uffae\047\uffae\050\uffae\051\uffae\052\uffae\053\uffae\054\uffae" +
    "\055\uffae\001\002\000\010\006\uffb1\022\uffb1\023\uffb1\001" +
    "\002\000\010\006\uffbb\022\uffbb\023\uffbb\001\002\000\010" +
    "\006\uffbe\022\uffbe\023\uffbe\001\002\000\010\006\uffb5\022" +
    "\uffb5\023\uffb5\001\002\000\010\006\uffbd\022\uffbd\023\uffbd" +
    "\001\002\000\054\005\141\024\133\033\150\034\142\035" +
    "\143\036\136\037\140\040\125\041\135\042\147\043\130" +
    "\044\127\045\131\046\124\047\137\050\152\051\126\052" +
    "\153\053\134\054\151\055\145\001\002\000\010\006\uffc0" +
    "\022\uffc0\023\uffc0\001\002\000\010\006\uffbf\022\uffbf\023" +
    "\uffbf\001\002\000\010\006\160\022\161\023\163\001\002" +
    "\000\004\005\uffaf\001\002\000\004\005\154\001\002\000" +
    "\010\006\uffba\022\uffba\023\uffba\001\002\000\010\006\uffc1" +
    "\022\uffc1\023\uffc1\001\002\000\010\006\uffb0\022\uffb0\023" +
    "\uffb0\001\002\000\010\006\uffb4\022\uffb4\023\uffb4\001\002" +
    "\000\010\006\uffb2\022\uffb2\023\uffb2\001\002\000\012\020" +
    "\073\021\065\056\072\060\063\001\002\000\004\006\156" +
    "\001\002\000\010\006\uffc5\022\uffc5\023\uffc5\001\002\000" +
    "\032\004\uffea\007\uffea\015\uffea\016\uffea\017\uffea\025\uffea" +
    "\026\uffea\027\uffea\030\uffea\031\uffea\032\uffea\056\uffea\001" +
    "\002\000\032\004\uffe9\007\uffe9\015\uffe9\016\uffe9\017\uffe9" +
    "\025\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\056" +
    "\uffe9\001\002\000\054\005\uffad\024\uffad\033\uffad\034\uffad" +
    "\035\uffad\036\uffad\037\uffad\040\uffad\041\uffad\042\uffad\043" +
    "\uffad\044\uffad\045\uffad\046\uffad\047\uffad\050\uffad\051\uffad" +
    "\052\uffad\053\uffad\054\uffad\055\uffad\001\002\000\054\005" +
    "\141\024\133\033\150\034\142\035\143\036\136\037\140" +
    "\040\125\041\135\042\147\043\130\044\127\045\131\046" +
    "\124\047\137\050\152\051\126\052\153\053\134\054\151" +
    "\055\145\001\002\000\054\005\uffac\024\uffac\033\uffac\034" +
    "\uffac\035\uffac\036\uffac\037\uffac\040\uffac\041\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\052\uffac\053\uffac\054\uffac\055\uffac\001\002\000\010" +
    "\006\uffc3\022\161\023\163\001\002\000\010\006\166\022" +
    "\161\023\163\001\002\000\010\006\uffc2\022\uffc2\023\uffc2" +
    "\001\002\000\010\006\uffc4\022\161\023\163\001\002\000" +
    "\006\004\uffdf\010\uffdf\001\002\000\014\006\uffd9\020\uffd8" +
    "\021\uffd8\056\uffd8\060\uffd8\001\002\000\034\004\uffe4\010" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\025\uffe4\026\uffe4" +
    "\027\uffe4\030\uffe4\031\uffe4\032\uffe4\056\uffe4\001\002\000" +
    "\054\005\141\024\133\033\150\034\142\035\143\036\136" +
    "\037\140\040\125\041\135\042\147\043\130\044\127\045" +
    "\131\046\124\047\137\050\152\051\126\052\153\053\134" +
    "\054\151\055\145\001\002\000\010\006\175\022\161\023" +
    "\163\001\002\000\032\004\uffe5\007\uffe5\015\uffe5\016\uffe5" +
    "\017\uffe5\025\uffe5\026\uffe5\027\uffe5\030\uffe5\031\uffe5\032" +
    "\uffe5\056\uffe5\001\002\000\032\004\uffe1\007\023\015\034" +
    "\016\033\017\026\025\035\026\053\027\044\030\046\031" +
    "\042\032\025\056\031\001\002\000\034\004\uffe6\010\uffe6" +
    "\014\uffe6\015\uffe6\016\uffe6\017\uffe6\025\uffe6\026\uffe6\027" +
    "\uffe6\030\uffe6\031\uffe6\032\uffe6\056\uffe6\001\002\000\004" +
    "\007\ufff6\001\002\000\006\006\202\056\203\001\002\000" +
    "\004\007\ufff5\001\002\000\004\006\204\001\002\000\004" +
    "\007\ufff8\001\002\000\004\010\206\001\002\000\004\002" +
    "\ufffe\001\002\000\004\007\023\001\002\000\004\005\212" +
    "\001\002\000\004\007\ufffa\001\002\000\006\006\213\056" +
    "\203\001\002\000\004\007\ufff9\001\002\000\012\010\ufffb" +
    "\012\ufffb\013\ufffb\056\ufffb\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\213\000\004\002\003\001\001\000\002\001\001\000" +
    "\004\003\005\001\001\000\004\004\010\001\001\000\002" +
    "\001\001\000\010\005\012\006\015\052\011\001\001\000" +
    "\002\001\001\000\004\007\206\001\001\000\006\011\017" +
    "\012\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\005\016\006\015\052\011\001\001\000\002\001\001" +
    "\000\010\005\204\006\015\052\011\001\001\000\004\010" +
    "\177\001\001\000\004\013\023\001\001\000\034\014\040" +
    "\016\035\017\042\020\036\024\044\026\027\027\026\030" +
    "\046\031\050\032\051\033\031\034\037\045\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\013\107\015\171\016\110\017\042\020\036\024\044" +
    "\026\027\027\026\030\046\031\111\032\112\033\031\034" +
    "\037\045\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\014\117\016\035\017\042\020\036" +
    "\024\044\026\027\027\026\030\046\031\050\032\051\033" +
    "\031\034\037\045\047\001\001\000\036\013\107\015\106" +
    "\016\110\017\042\020\036\024\044\026\027\027\026\030" +
    "\046\031\111\032\112\033\031\034\037\045\047\001\001" +
    "\000\022\035\103\036\104\037\063\040\061\041\060\042" +
    "\065\043\066\044\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\014\053\016\035\017\042\020" +
    "\036\024\044\026\027\027\026\030\046\031\050\032\051" +
    "\033\031\034\037\045\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\020\036\070\037\063\040\061\041\060\042" +
    "\065\043\066\044\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\036\075\037\063\040\061\041\060" +
    "\042\065\043\066\044\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\036\100\037\063\040\061\041\060" +
    "\042\065\043\066\044\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\022\114\023\115\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\013\107\015" +
    "\116\016\110\017\042\020\036\024\044\026\027\027\026" +
    "\030\046\031\111\032\112\033\031\034\037\045\047\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\143\047" +
    "\145\050\131\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\046\166\047\145\050\131\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\046\164\047\145\050\131\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\021\156\051\161\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\020\036\154\037\063\040\061\041\060\042\065\043" +
    "\066\044\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\046\163\047\145\050\131\001\001\000\002\001\001" +
    "\000\004\051\161\001\001\000\004\051\161\001\001\000" +
    "\002\001\001\000\004\051\161\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\046\173\047" +
    "\145\050\131\001\001\000\006\025\175\051\161\001\001" +
    "\000\002\001\001\000\036\013\107\015\176\016\110\017" +
    "\042\020\036\024\044\026\027\027\026\030\046\031\111" +
    "\032\112\033\031\034\037\045\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\213\001\001\000\004\010\210" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    docSize = 0;
    parsedDoc = new ArrayList();
    row = new ArrayList();
    addDoc("",0);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {

    Symbol s = getScanner().next_token();
    while(s.sym == Symbols.COMMENT){
        s = getScanner().next_token();
    }
    // System.out.println(s.sym);
    return s;

    }

    

    public HashMap<Integer,String> symbols;

    public Integer docSize;

    public String errors;
    
    public boolean giveMeInt = false;

    public void addDoc(String s, Integer i){
        parsedDoc.add(s);
        row.add(i);
        docSize++;
    }

    public void setDoc(String s, Integer i, Integer addr){
        parsedDoc.set(addr,s);
        row.set(addr,i);
    }

    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception{
        if(cur_token.sym != 1){
            Symbols s = new Symbols();
            Field[] syms = s.getClass().getFields();
            symbols = new HashMap();
            for(Field f : syms){
                symbols.put(f.getInt(s), f.getName());
            }
            if(cur_token.left == -1)
                throw new java.lang.Exception("Syntax error: Unexpected EOF.");
            short[] row = action_tab[cur_token.sym];
            String ex = "Syntax error: Unexpected <" + symbols.get(cur_token.sym) + "> at line: " + (cur_token.left +1) + ".\nExpected:\n";
            for(short r : row){
                ex += ("<"+symbols.get((int)r)+">\n");
            }
            throw new java.lang.Exception(ex);
        }
    }
    
    public void syntax_error(Symbol cur_token) {
        if(cur_token.sym != 1){
                        Symbols s = new Symbols();
            Field[] syms = s.getClass().getFields();
            symbols = new HashMap();
            for(Field f : syms){
                try {
                    symbols.put(f.getInt(s), f.getName());
                } catch (Exception e) {}
            }
            short[] row = action_tab[cur_token.sym];
            String ex = "Syntax error: Unexpected <" + symbols.get(cur_token.sym) + "> at line: " + (cur_token.left +1) + ".\nExpected:\n";
            for(short r : row){
                ex += ("<"+symbols.get((int)r)+">\n");
            }
            report_error("Syntax error: Unexpected <" + symbols.get(cur_token.sym) + "> at line: " + (cur_token.left +1) + ".",cur_token.sym);
        }
    }

    public void report_fatal_error(String message, Object info) throws java.lang.Exception{
        throw new java.lang.Exception(message);
    }

    public void report_error(String message, Object info){
        Integer s = Integer.parseInt(info.toString());
        errors += ("Error: " + message + " In line: " + (s+1) + "\n");
    }

    public static void main(String args[]) throws Exception 
    {
        Lexer lexer = new Lexer(System.in);
        Parser parser = new Parser(lexer);
        parser.parse();
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {


    private String contextParam = "";
    private HashMap<String,Integer> customMethod = new HashMap();
    private HashMap<String,Integer> customParamMethod = new HashMap();
    private HashMap<String,Integer> requestMethod = new HashMap();
    private HashMap<String,Integer> requestParamMethod = new HashMap();
    private String classname = "";
    private boolean inMethod = false;

  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // conjunction ::= OR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("OR",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunction",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // conjunction ::= AND 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("AND",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conjunction",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // not ::= NOT 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOT",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("not",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ifzerokey ::= IFZERO 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("IFZERO",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifzerokey",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // conditional ::= NOFACINGW 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGW",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // conditional ::= NOFACINGE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGE",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // conditional ::= NOFACINGS 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGS",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // conditional ::= NOFACINGN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOFACINGN",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // conditional ::= FACINGW 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGW",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // conditional ::= FACINGE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGE",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // conditional ::= FACINGS 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGS",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // conditional ::= FACINGN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("FACINGN",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // conditional ::= NOBBAG 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NOBBAG",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // conditional ::= ANYBBAG 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("ANYBBAG",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // conditional ::= NONEXTB 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NONEXTB",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // conditional ::= NEXTB 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("NEXTB",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // conditional ::= CRBLOCK 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CRBLOCK",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // conditional ::= CRCLEAR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CRCLEAR",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // conditional ::= CLBLOCK 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CLBLOCK",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // conditional ::= CLCLEAR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CLCLEAR",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // conditional ::= CFBLOCK 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CFBLOCK",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // conditional ::= CFCLEAR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("CFCLEAR",eleft); RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // conditional ::= LPAREN conditional RPAREN 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // conditional ::= conditional conjunction conditional 
            {
              Integer RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer c1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c1 + c2 + 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // conditional ::= not conditional 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c + 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // conditional ::= ifzerokey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = 1 + a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("conditional",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // type ::= DEFINE 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // type ::= VOID 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("type",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // act ::= TURNOFF 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("TURNOFF",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // act ::= TURNLEFT 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("TURNLEFT",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // act ::= PUTBPR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("PUTBPR",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // act ::= PICKBPR 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("PICKBPR",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // act ::= MOVE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("MOVE",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("act",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // succkey ::= SUCC 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("SUCC",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("succkey",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // succ ::= succkey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p+1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("succ",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // predkey ::= PRED 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("PRED",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("predkey",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // pred ::= predkey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = p+1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("pred",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // modifier ::= succ 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // modifier ::= pred 
            {
              Integer RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("modifier",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // number ::= NUMBER 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                            parser.addDoc(n.toString(),nleft); 
                            RESULT = 1; 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("number",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // arg ::= NAME 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            if(contextParam.compareTo(n) != 0){
                                RESULT = 0;
                                parser.report_error("Undefined parameter.",(Object)nleft);
                            }else{
                                parser.addDoc("PARAM",nleft); 
                                RESULT = 1;
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // arg ::= modifier 
            {
              Integer RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = m; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // arg ::= number 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("arg",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // args ::= arg 
            {
              Integer RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer a = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("args",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // custom_p_statement ::= NAME LPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            parser.addDoc("PARAMCALL",nleft);
                            requestParamMethod.put(n,parser.docSize);
                            parser.addDoc("",nleft);
                            RESULT = 2;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_p_statement",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // custom_statement ::= NAME LPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
                            parser.addDoc("CALL",nleft);
                            requestMethod.put(n,parser.docSize);
                            parser.addDoc("",nleft);
                            RESULT = 2;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("custom_statement",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // structure ::= iterate 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structure",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // structure ::= while 
            {
              Integer RESULT =null;
		int wleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int wright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer w = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = w; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structure",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // structure ::= if 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("structure",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // common_statement ::= EXITINST LPAREN RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                            if(inMethod == false){
                                RESULT = 0;
                                parser.report_error("Exit instruction in main.",(Object)eleft);
                            }else{
                                RESULT = 1;
                                parser.addDoc("EXITINST",eleft); 
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // common_statement ::= custom_p_statement args RPAREN 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s+p; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // common_statement ::= custom_statement RPAREN 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // common_statement ::= act LPAREN RPAREN 
            {
              Integer RESULT =null;
		 RESULT = 1; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // common_statement ::= 
            {
              Integer RESULT =null;
		 RESULT = 0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("common_statement",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // iteratekey ::= ITERATE 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("ITERATE",eleft); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteratekey",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // iteratehead ::= iteratekey LPAREN arg RPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                            parser.addDoc("",tleft); 
                            RESULT = 1 + n + 1;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iteratehead",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // iterate ::= iteratehead statement 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  
                        parser.addDoc("RETURN",tleft); 
                        RESULT = t + i + 1;
                        parser.setDoc(parser.docSize.toString(),tleft,parser.docSize-(t+2)); 
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("iterate",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // dokey ::= RPAREN 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("CONDBRANCH",tleft);
                            parser.addDoc("",tleft);
                            RESULT = 2;

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("dokey",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // while ::= WHILE LPAREN conditional dokey statement 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer d = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("BRANCH",sleft);
                            RESULT = c + d + s + 2;
                            parser.addDoc((new Integer(parser.docSize - (s+4))).toString(),sleft);
                            parser.setDoc(parser.docSize.toString(),sleft,parser.docSize-(s+3));

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // elsekey ::= ELSE 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("BRANCH",tleft);
                            parser.addDoc("",tleft);
                            RESULT = 2;

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsekey",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // elsepart ::= elsekey 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("elsepart",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // thenkey ::= RPAREN 
            {
              Integer RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            parser.addDoc("CONDBRANCH",tleft);
                            parser.addDoc("",tleft);
                            RESULT = 2;

                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("thenkey",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ifpart ::= IF LPAREN conditional thenkey 
            {
              Integer RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer t = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            RESULT = c+t;  
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ifpart",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // if ::= ifpart statement 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            RESULT = i + s1;
                            parser.setDoc(new Integer(parser.docSize).toString(),ileft,parser.docSize-(s1+1));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // if ::= ifpart statement elsepart statement 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Integer i = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 

                            RESULT = i + s1 + e + s2;
                            parser.setDoc(new Integer(parser.docSize-s2).toString(),ileft,parser.docSize-((e + s1 + s2)+1));
                            parser.setDoc(new Integer(parser.docSize).toString(),eleft,parser.docSize-(s2+1));
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // statement ::= block 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // statement ::= structure 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // statement ::= sentence 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // sentence ::= common_statement SEMICOL 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("sentence",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // statement_list ::= common_statement 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // statement_list ::= structure statement_list 
            {
              Integer RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s1+s2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // statement_list ::= sentence statement_list 
            {
              Integer RESULT =null;
		int s1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = s1+s2; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("statement_list",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // block ::= LKEY statement_list RKEY 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = s; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("block",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_const ::= NAME LPAREN RPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                            
                            if (classname != n)
                                parser.report_error(n + " is not the name of the class.",(Object)nleft);
                            customMethod.put(n,parser.docSize);
                            RESULT = nleft;
                            parser.setDoc(parser.docSize.toString(),nleft,0);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_const ::= NAME defparameter 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                            if (classname != n)
                                parser.report_error(n + " is not the name of the class.",(Object)nleft);
                            parser.giveMeInt = true;
                            customParamMethod.put(n,parser.docSize);
                            RESULT = nleft;
                            parser.setDoc(parser.docSize.toString(),nleft,0);
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_const",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // constructor ::= method_const block 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("constructor",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // defparameter ::= LPAREN NAME RPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 contextParam = n; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("defparameter",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // method_declarator ::= NAME LPAREN RPAREN 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 
                            customMethod.put(n,parser.docSize); inMethod = true; 
                            RESULT = nleft;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declarator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // method_declarator ::= NAME defparameter 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                            customParamMethod.put(n,parser.docSize); inMethod = true;
                            RESULT = nleft;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declarator",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // method_declaration ::= type method_declarator block 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer s = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 parser.addDoc("RETURN",sleft); inMethod = false;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_declaration",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declarations ::= method_declaration declarations 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declarations ::= 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("declarations",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // class_body ::= LKEY declarations constructor declarations RKEY 
            {
              Integer RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_body",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // class_name ::= NAME 
            {
              Integer RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            classname = s;
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("class_name",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= CLASS class_name class_body 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer b = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                            Entry<String,Integer>[] rMethods = requestMethod.entrySet().toArray(new Entry[0]);
                            
                            for(Entry<String,Integer> e : rMethods){
                                Integer dir = customMethod.get(e.getKey());
                                Integer r = parser.row.get(e.getValue());
                                if (dir == null)
                                    parser.report_error(n + " is not defined previously or has too many args.",(Object)r);
                                else{
                                    parser.setDoc(dir.toString(),r,e.getValue());
                                }
                            }
                            
                            Entry<String,Integer>[] pRMethods = requestParamMethod.entrySet().toArray(new Entry[0]);
                            
                            for(Entry<String,Integer> e : pRMethods){
                                Integer dir = customParamMethod.get(e.getKey());
                                Integer r = parser.row.get(e.getValue());
                                if (dir == null)
                                    parser.report_error(n + " is not defined previously or has too many args.",(Object)r);
                                else{
                                    parser.setDoc(dir.toString(),r,e.getValue());
                                }
                            }
                        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer start_val = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

